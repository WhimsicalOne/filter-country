{"version":3,"sources":["context.js","components/Country.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","Controller","_ref","children","_useState","useState","countries","heading","_useState2","Object","slicedToArray","state","setState","useEffect","axios","get","then","res","data","catch","err","console","log","react_default","a","createElement","Provider","value","Country","_useContext","useContext","undefined","length","Fragment","map","country","key","numericCode","className","name","region","Filter","_useContext2","setRegion","concat","id","onChange","e","target","App","components_Filter","components_Country","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f654df6.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const Context = createContext();\r\n\r\nexport function Controller({ children }) {\r\n    let intialState = {\r\n        countries: [],\r\n        heading: \"Welcome to this thing!\"\r\n    };\r\n    const url = \"https://restcountries.eu/rest/v2/all\";\r\n    const [state, setState] = useState(intialState);\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(url)\r\n            .then(res => {\r\n                //console.log(res.data);\r\n                setState({\r\n                    countries: res.data,\r\n                    heading: \"Countries are loaded\"\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n    return (\r\n        <Context.Provider value={[state, setState]}>\r\n            {children}\r\n        </Context.Provider>\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Context } from \"../context\";\r\n\r\nconst Country = () => {\r\n    const [state] = useContext(Context);\r\n    const { countries, heading } = state;\r\n\r\n    if (countries === undefined || countries.length === 0) {\r\n        return <p>Loading...</p>;\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <h3>{heading}</h3>\r\n                {countries.map(country => (\r\n                    <div key={country.numericCode} className=\"country\">\r\n                        <p>{country.name}</p>\r\n                        <p\r\n                            className={\r\n                                country.region === \"\" ? \"error\" : \"success\"\r\n                            }\r\n                        >\r\n                            {country.region === \"\" ? \"Unknown\" : country.region}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Country;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Context } from \"../context\";\r\n\r\nconst Filter = () => {\r\n    const [state, setState] = useContext(Context);\r\n    // const [userChoice, setUserChoice] = useState(\"\");\r\n    const [region, setRegion] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://restcountries.eu/rest/v2/region/${region}`)\r\n            .then(res => {\r\n                let countries = res.data;\r\n                setState({ countries: countries, heading: \"Filtered.\" });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [region]);\r\n\r\n    const handleChange = e => {\r\n        if (e.target.value === \"all\") {\r\n            axios\r\n                .get(\"https://restcountries.eu/rest/v2/all\")\r\n                .then(res => {\r\n                    let countries = res.data;\r\n                    setState({ countries: countries, heading: \"Normal!!\" });\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            setRegion(e.target.value);\r\n        }\r\n    };\r\n    return (\r\n        <select name=\"\" id=\"\" onChange={handleChange}>\r\n            <option value=\"all\">All</option>\r\n            <option value=\"africa\">Africa</option>\r\n            <option value=\"americas\">Americas</option>\r\n            <option value=\"asia\">Asia</option>\r\n            <option value=\"europe\">Europe</option>\r\n            <option value=\"oceania\">Oceania</option>\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Country from \"./components/Country\";\nimport Filter from \"./components/Filter\";\nimport { Controller } from \"./context\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Controller>\n                <Filter />\n                <Country />\n            </Controller>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}